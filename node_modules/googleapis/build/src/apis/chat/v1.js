"use strict";
/**
 * Copyright 2015 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var apirequest_1 = require("../../lib/apirequest");
// TODO: We will eventually get the `any` in here cleared out, but in the
// interim we want to turn on no-implicit-any.
// tslint:disable: no-any
// tslint:disable: class-name
// tslint:disable: variable-name
// tslint:disable: jsdoc-format
/**
 * Hangouts Chat API
 *
 * Create bots and extend the new Hangouts Chat.
 *
 * @example
 * const google = require('googleapis');
 * const chat = google.chat('v1');
 *
 * @namespace chat
 * @type {Function}
 * @version v1
 * @variation v1
 * @param {object=} options Options for Chat
 */
var Chat = /** @class */ (function () {
    function Chat(options, google) {
        this.root = this;
        this._options = options || {};
        this.google = google;
        this.getRoot.bind(this);
        this.dms = new Resource$Dms(this);
        this.rooms = new Resource$Rooms(this);
        this.spaces = new Resource$Spaces(this);
    }
    Chat.prototype.getRoot = function () {
        return this.root;
    };
    return Chat;
}());
exports.Chat = Chat;
var Resource$Dms = /** @class */ (function () {
    function Resource$Dms(root) {
        this.root = root;
        this.getRoot.bind(this);
        this.conversations = new Resource$Dms$Conversations(root);
        this.messages = new Resource$Dms$Messages(root);
    }
    Resource$Dms.prototype.getRoot = function () {
        return this.root;
    };
    return Resource$Dms;
}());
exports.Resource$Dms = Resource$Dms;
var Resource$Dms$Conversations = /** @class */ (function () {
    function Resource$Dms$Conversations(root) {
        this.root = root;
        this.getRoot.bind(this);
        this.messages = new Resource$Dms$Conversations$Messages(root);
    }
    Resource$Dms$Conversations.prototype.getRoot = function () {
        return this.root;
    };
    return Resource$Dms$Conversations;
}());
exports.Resource$Dms$Conversations = Resource$Dms$Conversations;
var Resource$Dms$Conversations$Messages = /** @class */ (function () {
    function Resource$Dms$Conversations$Messages(root) {
        this.root = root;
        this.getRoot.bind(this);
    }
    Resource$Dms$Conversations$Messages.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Dms$Conversations$Messages.prototype.create = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://chat.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1/{parent}/messages')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: ['parent'],
            pathParams: ['parent'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Dms$Conversations$Messages;
}());
exports.Resource$Dms$Conversations$Messages = Resource$Dms$Conversations$Messages;
var Resource$Dms$Messages = /** @class */ (function () {
    function Resource$Dms$Messages(root) {
        this.root = root;
        this.getRoot.bind(this);
    }
    Resource$Dms$Messages.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Dms$Messages.prototype.create = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://chat.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1/{parent}/messages')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: ['parent'],
            pathParams: ['parent'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Dms$Messages;
}());
exports.Resource$Dms$Messages = Resource$Dms$Messages;
var Resource$Rooms = /** @class */ (function () {
    function Resource$Rooms(root) {
        this.root = root;
        this.getRoot.bind(this);
        this.conversations = new Resource$Rooms$Conversations(root);
        this.messages = new Resource$Rooms$Messages(root);
    }
    Resource$Rooms.prototype.getRoot = function () {
        return this.root;
    };
    return Resource$Rooms;
}());
exports.Resource$Rooms = Resource$Rooms;
var Resource$Rooms$Conversations = /** @class */ (function () {
    function Resource$Rooms$Conversations(root) {
        this.root = root;
        this.getRoot.bind(this);
        this.messages = new Resource$Rooms$Conversations$Messages(root);
    }
    Resource$Rooms$Conversations.prototype.getRoot = function () {
        return this.root;
    };
    return Resource$Rooms$Conversations;
}());
exports.Resource$Rooms$Conversations = Resource$Rooms$Conversations;
var Resource$Rooms$Conversations$Messages = /** @class */ (function () {
    function Resource$Rooms$Conversations$Messages(root) {
        this.root = root;
        this.getRoot.bind(this);
    }
    Resource$Rooms$Conversations$Messages.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Rooms$Conversations$Messages.prototype.create = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://chat.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1/{parent}/messages')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: ['parent'],
            pathParams: ['parent'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Rooms$Conversations$Messages;
}());
exports.Resource$Rooms$Conversations$Messages = Resource$Rooms$Conversations$Messages;
var Resource$Rooms$Messages = /** @class */ (function () {
    function Resource$Rooms$Messages(root) {
        this.root = root;
        this.getRoot.bind(this);
    }
    Resource$Rooms$Messages.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Rooms$Messages.prototype.create = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://chat.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1/{parent}/messages')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: ['parent'],
            pathParams: ['parent'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Rooms$Messages;
}());
exports.Resource$Rooms$Messages = Resource$Rooms$Messages;
var Resource$Spaces = /** @class */ (function () {
    function Resource$Spaces(root) {
        this.root = root;
        this.getRoot.bind(this);
        this.members = new Resource$Spaces$Members(root);
        this.messages = new Resource$Spaces$Messages(root);
    }
    Resource$Spaces.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Spaces.prototype.get = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://chat.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1/{name}').replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['name'],
            pathParams: ['name'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Spaces.prototype.list = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://chat.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1/spaces').replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: [],
            pathParams: [],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Spaces;
}());
exports.Resource$Spaces = Resource$Spaces;
var Resource$Spaces$Members = /** @class */ (function () {
    function Resource$Spaces$Members(root) {
        this.root = root;
        this.getRoot.bind(this);
    }
    Resource$Spaces$Members.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Spaces$Members.prototype.get = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://chat.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1/{name}').replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['name'],
            pathParams: ['name'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Spaces$Members.prototype.list = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://chat.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1/{parent}/members')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['parent'],
            pathParams: ['parent'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Spaces$Members;
}());
exports.Resource$Spaces$Members = Resource$Spaces$Members;
var Resource$Spaces$Messages = /** @class */ (function () {
    function Resource$Spaces$Messages(root) {
        this.root = root;
        this.getRoot.bind(this);
    }
    Resource$Spaces$Messages.prototype.getRoot = function () {
        return this.root;
    };
    Resource$Spaces$Messages.prototype.create = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://chat.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1/{parent}/messages')
                    .replace(/([^:]\/)\/+/g, '$1'),
                method: 'POST'
            }, options),
            params: params,
            requiredParams: ['parent'],
            pathParams: ['parent'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Spaces$Messages.prototype.delete = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://chat.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1/{name}').replace(/([^:]\/)\/+/g, '$1'),
                method: 'DELETE'
            }, options),
            params: params,
            requiredParams: ['name'],
            pathParams: ['name'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Spaces$Messages.prototype.get = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://chat.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1/{name}').replace(/([^:]\/)\/+/g, '$1'),
                method: 'GET'
            }, options),
            params: params,
            requiredParams: ['name'],
            pathParams: ['name'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    Resource$Spaces$Messages.prototype.update = function (params, options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        options = options || {};
        var rootUrl = options.rootUrl || 'https://chat.googleapis.com/';
        var parameters = {
            options: Object.assign({
                url: (rootUrl + '/v1/{name}').replace(/([^:]\/)\/+/g, '$1'),
                method: 'PUT'
            }, options),
            params: params,
            requiredParams: ['name'],
            pathParams: ['name'],
            context: this.getRoot()
        };
        if (callback) {
            apirequest_1.createAPIRequest(parameters, callback);
        }
        else {
            return apirequest_1.createAPIRequest(parameters);
        }
    };
    return Resource$Spaces$Messages;
}());
exports.Resource$Spaces$Messages = Resource$Spaces$Messages;
//# sourceMappingURL=v1.js.map